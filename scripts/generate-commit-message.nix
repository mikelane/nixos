{ pkgs }:

let
  instructions = ''
    Please generate a commit message from the included changes with the
    following guidelines:

    1. It should begin with a short ''\(72 chars or less''\) summary. This
       summary should not be prefixed with anything like \`Title:\`. Just
       provide the summary as a short statement that stands on its own.
    2. Following the summary, it should include more detailed explanatory
       text. Please wrap the explanatory text to 72 characters. The blank
       line separating the summary from the body is critical ''\(unless you
       omit the body entirely''\). This is a plain text document. You do not
       need to escape any characters or add backslashes to the end of lines.
    3. Write your commit message in the imperative, _e.g._, 'Fix bug' and
       not 'Fixed bug' or 'Fixes bug.' This convention matches up with
       commit messages generated by commands like git merge and git revert.
    4. Any further paragraphs come after blank lines.

    Note:
    - Bullet points are okay, too.
    - Typically a hyphen or asterisk is used for the bullet, followed by a
      single space. Use a hanging indent.

    Additionally:
    - Configuration files like pyproject.toml, package.json, or Cargo.toml
      generally should not be considered the primary change unless the rest
      of the files are changed because they are fixing breaking changes in
      a new dependency version.
    - Changes in code files such as .py, .ts, .js, or .rs files should
      generally be considered the primary changes and the changes that are
      called out in the title and main body of the commit.
    - DO NOT use suprfluous backslashes. You do not need to escape any text!

    Please provide the output as plain text without any avoiding code fences
    ''\(triple backticks''\), around the response. Do not add backslashes to
    the end of any lines.
  '';

  commit_options = ''
    Use this commit message
    Edit this commit message
    Cancel the commit
  '';
in
pkgs.writeShellApplication {
  name = "generate-commit-message";
  runtimeInputs = with pkgs; [ shell-gpt pandoc ];
  text = ''
    generate_commit_message() {
        local diff_output_file
        local diff_lock_snap_file
        diff_lock_snap_file="diff_lock_snap.txt"
        diff_output_file="diff_output.txt"

        git diff --cached origin/"$(git branch --show-current)" -- . ':(exclude)**/*lock.yaml' ':(exclude)**/*.lock' ':(exclude)*.snap' > "$diff_output_file"
        git diff --cached origin/"$(git branch --show-current)" --name-only -- '**/*lock.yaml' '**/*.lock' '**/*.snap' > "$diff_lock_snap_file"

        cat "$diff_output_file" "$diff_lock_snap_file" | sgpt "${instructions}"
        rm "$diff_output_file" "$diff_lock_snap_file"
    }


    commit_message="$(generate_commit_message | pandoc -f markdown -t markdown --wrap=auto --columns=72)"
    echo "$commit_message"

    choice="$(echo -e "${commit_options}" | fzf --height=10 --reverse --header="Select an action for the commit message:")"

    case "$choice" in
      "Use this commit message")
        git commit -m "$commit_message"
        ;;
      "Edit this commit message")
        git commit -m "$commit_message"
        git commit --amend
        ;;
      "Cancel the commit")
        echo "Commit cancelled."
        ;;
      *)
        echo "Invalid choice. Commit cancelled."
        ;;
    esac
  '';
}

